[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "aws-trainium-inferentia-tutorial"
version = "3.0.0"
description = "Complete tutorial and tools for academic research using AWS Trainium and Inferentia chips"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Scott Friedman", email = "scott.friedman@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education",
]
requires-python = ">=3.8"
dependencies = [
    "boto3>=1.34.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.14.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "requests>=2.31.0",
    "flask>=2.3.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "psutil>=5.9.0",
    "python-dateutil>=2.8.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "pydocstyle>=6.3.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "coverage[toml]>=7.0.0",
]
neuron = [
    "torch-xla>=2.0.0",
    "accelerate>=0.20.0",
]
science = [
    "scipy>=1.10.0",
    "seaborn>=0.12.0",
    "rdkit>=2023.3.1",
    "biopython>=1.81",
    "faiss-cpu>=1.7.4",
]
notebooks = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
]

[project.scripts]
aws-ml-setup = "scripts.setup_aws_environment:main"
aws-ml-monitor = "scripts.cost_monitor:main"
aws-ml-emergency = "scripts.emergency_shutdown:main"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["aws_trainium_tutorial"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "boto3.*",
    "botocore.*",
    "faiss.*",
    "rdkit.*",
    "Bio.*",
    "matplotlib.*",
    "seaborn.*",
    "sklearn.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "aws: marks tests that require AWS credentials (deselect with '-m \"not aws\"')",
    "neuron: marks tests that require Neuron SDK (deselect with '-m \"not neuron\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["scripts", "examples", "advanced"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/easter_eggs/*",  # Easter eggs are experimental
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # AWS-specific exclusions
    "except ClientError:",
    "except NoCredentialsError:",
    "# Placeholder for actual implementation",
]
fail_under = 85
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]
