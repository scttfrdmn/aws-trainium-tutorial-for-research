repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: check-json
      - id: check-ast
      - id: debug-statements

  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503,F401]
        additional_dependencies: [flake8-docstrings, pydocstyle]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict]
        additional_dependencies: [types-requests, types-PyYAML]

  # Documentation enforcement
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google, --add-ignore=D100,D104]

  # Custom hooks for testing and coverage
  - repo: local
    hooks:
      - id: documentation-check
        name: Documentation Coverage Check
        entry: python
        language: system
        args: [-c, "
import ast;
import sys;
import os;
def check_docstrings(filepath):
    with open(filepath, 'r') as f:
        tree = ast.parse(f.read());
    missing = [];
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
            if not ast.get_docstring(node) and not node.name.startswith('_'):
                missing.append(f'{filepath}:{node.lineno} - {node.name}');
    return missing;
files = [f for f in sys.argv[1:] if f.endswith('.py')];
all_missing = [];
for f in files:
    all_missing.extend(check_docstrings(f));
if all_missing:
    print('Missing docstrings:');
    for m in all_missing[:10]:
        print(f'  {m}');
    if len(all_missing) > 10:
        print(f'  ... and {len(all_missing)-10} more');
    sys.exit(1);
print('✅ All public functions and classes have docstrings')
"]
        pass_filenames: true
        files: \.py$
        exclude: ^(tests/|__pycache__|\.git)

      - id: pytest-with-coverage
        name: Run tests with coverage
        entry: python
        language: system
        args: [-m, pytest, tests/, --cov=scripts, --cov=examples, --cov=advanced, --cov-report=term-missing, --cov-fail-under=85, -v, --tb=short]
        pass_filenames: false
        always_run: true

      - id: test-examples-syntax
        name: Test example scripts syntax
        entry: python
        language: system
        args: [-c, "
import sys;
import subprocess;
import os;
examples = ['scripts/setup_budget.py', 'scripts/ephemeral_instance.py', 'scripts/cost_monitor.py'];
failed = [];
for example in examples:
    if os.path.exists(example):
        try:
            subprocess.run([sys.executable, '-m', 'py_compile', example], check=True, capture_output=True);
            print(f'✅ {example} compiles successfully');
        except subprocess.CalledProcessError as e:
            failed.append(example);
            print(f'❌ {example} failed to compile: {e.stderr.decode()}');
if failed:
    sys.exit(1);
print('✅ All example scripts compile successfully')
"]
        pass_filenames: false
        always_run: true
